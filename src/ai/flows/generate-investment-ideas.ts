// This file is machine-generated - edit at your own risk!

'use server';

/**
 * @fileOverview Investment idea generator using GenAI.
 *
 * - generateInvestmentIdeas - A function that generates investment ideas.
 * - GenerateInvestmentIdeasInput - The input type for the generateInvestmentIdeas function.
 * - GenerateInvestmentIdeasOutput - The return type for the generateInvestmentIdeas function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateInvestmentIdeasInputSchema = z.object({
  category: z.string().describe('The category of investment ideas to generate, e.g., RealEstate, Agriculture.'),
  numIdeas: z.number().describe('The number of investment ideas to generate.'),
});
export type GenerateInvestmentIdeasInput = z.infer<typeof GenerateInvestmentIdeasInputSchema>;

const GenerateInvestmentIdeasOutputSchema = z.array(
  z.object({
    name: z.string().describe('The name of the investment idea.'),
    costET: z.number().describe('The cost of the investment in ET.'),
    incomePerSecET: z.number().describe('The income per second generated by the investment in ET.'),
    description: z
      .string()
      .optional()
      .describe('1-2 sentences about what this investment represents.'),
    riskLevel: z
      .enum(['Low', 'Medium', 'High'])
      .optional()
      .describe('Qualitative risk level for this investment.'),
  })
);
export type GenerateInvestmentIdeasOutput = z.infer<typeof GenerateInvestmentIdeasOutputSchema>;

export async function generateInvestmentIdeas(input: GenerateInvestmentIdeasInput): Promise<GenerateInvestmentIdeasOutput> {
  return generateInvestmentIdeasFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateInvestmentIdeasPrompt',
  input: {schema: GenerateInvestmentIdeasInputSchema},
  output: {schema: GenerateInvestmentIdeasOutputSchema},
  prompt: `You are a creative game designer tasked with generating engaging investment ideas for a tap-to-earn game centered around African resources.

  Generate {{numIdeas}} investment ideas for the category: {{category}}.

  Each investment idea should include:
  - name: A short, catchy name for the investment.
  - costET: The cost of the investment in ET (in-game currency). costET should be between 100 and 10000.
  - incomePerSecET: The passive income per second generated by the investment in ET. incomePerSecET should be between 0.1 and 10.0.
  - description: 1-2 sentences describing the investment and its in-game context.
  - riskLevel: One of Low, Medium, or High. Higher risk may imply higher returns.

  Ensure that the costET and incomePerSecET values are reasonably balanced, with more expensive investments providing proportionally higher income.

  The output should be a JSON array of investment objects, formatted as:
  [
    {
      "name": "Investment Name 1",
      "costET": 1234,
      "incomePerSecET": 1.23,
      "description": "...",
      "riskLevel": "Medium"
    },
    {
      "name": "Investment Name 2",
      "costET": 5678,
      "incomePerSecET": 5.67,
      "description": "...",
      "riskLevel": "High"
    }
  ]
  `,
});

const generateInvestmentIdeasFlow = ai.defineFlow(
  {
    name: 'generateInvestmentIdeasFlow',
    inputSchema: GenerateInvestmentIdeasInputSchema,
    outputSchema: GenerateInvestmentIdeasOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
